service:
  name: photowall-api
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  topicName: postTopic-${self:provider.stage}


# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-websockets-plugin
  - serverless-plugin-tracing
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x
  tracing: true 

  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
    

  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    POSTS_TABLE: tblPosts-${self:provider.stage}
    POST_INDEX_NAME: PostIndex
    COMMENTS_TABLE: tblComments-${self:provider.stage}
    CONNECTION_TABLE: tblConnections-${self:provider.stage}
    COMMENTS_INDEX: CommentIdIndex
    POST_IMAGES_S3_BUCKET: photowall-posts-images-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    POST_IMAGES_THUMBNAILS_S3_BUCKET: photowall-posts-images-thumbnail-${self:provider.stage}

  stage: ${opt:stage,'dev'}
  region: ${opt:region,'ap-south-1'}
  
  iamRoleStatements:

    - Effect: "Allow" # xray permissions (required)
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource:
        - "*"
    
functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetPosts:
    handler: src/lambda/http/getPosts.handler
    events:
      - http:
          method: get
          path: posts
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
        - dynamodb:Query
        - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.POSTS_TABLE}

      - Effect: Allow
        Action:
        - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.POSTS_TABLE}/index/${self:provider.environment.POST_INDEX_NAME}


  DeletePosts:
    handler: src/lambda/http/deletePost.handler
    events:
      - http:
          method: delete
          path: posts/{postId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
        - dynamodb:DeleteItem
        Resource:
          - "Fn::GetAtt": [ PostsTable, Arn ]


  AddPost:
    handler: src/lambda/http/addPost.handler
    events:
      - http:
          method: post
          path: posts
          cors: true
          authorizer: Auth
          request:
            # Schema that will be used to validate incoming requests
            schema:
              application/json: ${file(models/add-post-model.json)}
              
    iamRoleStatements:
      - Effect: Allow
        Action:
        - dynamodb:PutItem
        Resource:
          - "Fn::GetAtt": [ PostsTable, Arn ]

      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.POST_IMAGES_S3_BUCKET}/*



  GetComments:
    handler: src/lambda/http/getComments.handler
    events:
      - http:
          method: get
          path: posts/{postId}/comments
          cors: true
          authorizer: Auth
    
    iamRoleStatements:
      - Effect: Allow
        Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COMMENTS_TABLE}

      - Effect: Allow
        Action:
        - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COMMENTS_TABLE}/index/${self:provider.environment.COMMENTS_INDEX}
      
      - Effect: Allow
        Action:
        - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.POSTS_TABLE}


  AddComments:
    handler: src/lambda/http/addComment.handler
    events:
      - http:
          method: post
          path: posts/{postId}/comments
          cors: true
          authorizer: Auth  
          request:
            # Schema that will be used to validate incoming requests
            schema:
              application/json: ${file(models/add-comment-model.json)}
    
    iamRoleStatements:
      - Effect: Allow
        Action:
        - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COMMENTS_TABLE}

      - Effect: Allow
        Action:
        - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.POSTS_TABLE}
  
          

  GetCommentsById:
    handler: src/lambda/http/getCommentById.handler
    events:
      - http:
          method: get
          path: comments/{commentId}
          cors: true
          authorizer: Auth
    
    iamRoleStatements:
      - Effect: Allow
        Action:
        - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COMMENTS_TABLE}

      - Effect: Allow
        Action:
        - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COMMENTS_TABLE}/index/${self:provider.environment.COMMENTS_INDEX}

      

  SendNotifications:
    environment:
      STAGE: ${self:provider.stage}
      API_ID:
        Ref: WebsocketsApi
    handler: src/lambda/s3/sendNotifications.handler
    events:
      - sns:
          arn:
            Fn::Join:
              - ':'
              - - arn:aws:sns
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - ${self:custom.topicName}
          topicName: ${self:custom.topicName}

    iamRoleStatements:
      - Effect: Allow
        Action:
        - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONNECTION_TABLE}

  ResizeImage:
    handler: src/lambda/s3/resizeImage.handler
    events:
      - sns:
          arn:
            Fn::Join:
              - ':'
              - - arn:aws:sns
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - ${self:custom.topicName}
          topicName: ${self:custom.topicName}

    iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:PutObject
      Resource: "arn:aws:s3:::${self:provider.environment.POST_IMAGES_THUMBNAILS_S3_BUCKET}/*"


  ConnectHandler:
    handler: src/lambda/websocket/connect.handler
    events:
      - websocket:
          route: $connect

    iamRoleStatements:
      - Effect: Allow
        Action:
        - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONNECTION_TABLE}


  DisconnectHandler:
    handler: src/lambda/websocket/disconnect.handler
    events:
      - websocket:
          route: $disconnect

    iamRoleStatements:
      - Effect: Allow
        Action:
        - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONNECTION_TABLE}


  SyncWithElasticSearch:
    handler: src/lambda/dynamoDb/elasticSearchSync.handler
    environment:
      ES_ENDPOINT: !GetAtt PhotoWallPostsSearch.DomainEndpoint
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt PostsTable.StreamArn

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,DELETE'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    PostsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.POSTS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: postId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: postId
            KeyType: HASH
        GlobalSecondaryIndexes:
        - IndexName: ${self:provider.environment.POST_INDEX_NAME}
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
    
        StreamSpecification:
          StreamViewType: NEW_IMAGE
    
    CommentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.COMMENTS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: postId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
          - AttributeName: commentId
            AttributeType: S
        KeySchema:
          - AttributeName: postId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.COMMENTS_INDEX}
            KeySchema:
              - AttributeName: commentId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    WebSocketConnectionsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.CONNECTION_TABLE}


    AttachmentsBucket:
      Type: AWS::S3::Bucket
      DependsOn: SNSTopicPolicy
      Properties:
        BucketName: ${self:provider.environment.POST_IMAGES_S3_BUCKET}
        NotificationConfiguration:
          TopicConfigurations:
            - Event: s3:ObjectCreated:Put
              Topic: !Ref ImagesTopic
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
        
    SendNotificationsPermission:
      Type: AWS::Lambda::Permission
      Properties: 
        FunctionName: 
          Ref: SendNotificationsLambdaFunction
        Principal: s3.amazonaws.com
        Action: lambda:InvokeFunction
        SourceAccount:
          Ref: AWS::AccountId
        SourceArn: arn:aws:s3:::${self:provider.environment.POST_IMAGES_S3_BUCKET}

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.POST_IMAGES_S3_BUCKET}/*'
        Bucket:
          Ref: AttachmentsBucket

    SNSTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action: sns:Publish
              Resource:
                !Ref ImagesTopic
              Condition:
                ArnLike:
                  AWS:SourceArn: arn:aws:s3:::${self:provider.environment.POST_IMAGES_S3_BUCKET}
        Topics:
          - !Ref ImagesTopic


    ImagesTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Image bucket topic
        TopicName: ${self:custom.topicName}
      

              # Uncomment if you want to create Elasticsearch
    PhotoWallPostsSearch:
      Type: AWS::Elasticsearch::Domain
      Properties:
        ElasticsearchVersion: '6.3'
        DomainName: photowall-posts-search-${self:provider.stage}
        ElasticsearchClusterConfig:
          DedicatedMasterEnabled: false
          InstanceCount: '1'
          ZoneAwarenessEnabled: false
          InstanceType: t2.small.elasticsearch
        EBSOptions:
          EBSEnabled: true
          Iops: 0
          VolumeSize: 10
          VolumeType: 'gp2'

        AccessPolicies:
          Version: '2012-10-17'
          Statement:
            -
              Effect: Allow
              Principal:
                AWS: '*'
              Action: 'es:*'
              Resource: '*'
              
    ThumbnailsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.POST_IMAGES_THUMBNAILS_S3_BUCKET}



